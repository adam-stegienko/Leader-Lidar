pipeline {
    agent any
    tools {
        maven 'Maven 3.6.2'
        jdk 'JDK 8'
    }
    environment {
        GITLAB = credentials('a31843c7-9aa6-4723-95ff-87a1feb934a1')
        AWS_CREDS = credentials('aws-adam-iam')
        JFROG_ARTIFACTORY = credentials('jfrog-artifactory')
    }
    stages {
        stage('Cleaning') {
            steps {
                script {
                    deleteDir()
                    checkout scm
                }
            }
        }
        stage('Parameters Set-up') {
            steps {
                script {
                    properties([
                        disableConcurrentBuilds(), 
                        gitLabConnection(gitLabConnection: 'GitLab API Connection', jobCredentialId: ''),
                    ])
                }
            }
        }
        stage('Release branch versioning') {
            when { branch "release/*" }
            steps {
                script {
                    sh"""
                        git checkout master
                        git remote set-url origin http://\"$GITLAB\"@gitlab_repo/adam/exam-analytics.git
                        git pull --rebase
                    """
                    BRANCH_EXISTING = sh(
                        script: "(git ls-remote -q | grep -w $BRANCH_NAME) || BRANCH_EXISTING=False",
                        returnStdout: true,
                    )
                        if (BRANCH_EXISTING) {
                            echo "The $BRANCH_NAME branch is already existing."
                            sh """
                            git checkout $BRANCH_NAME
                            git pull origin $BRANCH_NAME --rebase
                            git fetch --tags
                            """
                        } else {
                            echo "The $BRANCH_NAME branch is not exsiting yet and needs to be created."
                            sh"""
                            git branch $BRANCH_NAME
                            git checkout $BRANCH_NAME
                            git remote set-url origin http://\"$GITLAB\"@gitlab_repo/adam/exam-analytics.git
                            git fetch --tags
                            """
                        }
                    MINOR_VERSION = BRANCH_NAME.split("/")[1]
                    LATEST_TAG = sh(
                        script: "git tag | sort -V | grep '^$MINOR_VERSION' | tail -1  || true",
                        returnStdout: true,
                    ).toString()
                    if (LATEST_TAG == "*.0") {
                            NEW_PATCH = "1"
                        } else if (LATEST_TAG) {
                            NEW_PATCH = (LATEST_TAG.tokenize(".")[2].toInteger() + 1).toString()
                        } else {
                            NEW_PATCH = "0"
                    }
                    NEW_TAG = MINOR_VERSION + "." + NEW_PATCH
                    echo "The new tag for feature commit is $NEW_TAG"
                    configFileProvider([configFile(fileId: 'fc3e184d-fd76-4262-a1e7-9a5671ebd340', variable: 'MAVEN_SETTINGS_XML')]) {
                        sh "mvn versions:set -DnewVersion=$NEW_TAG"
                    }
                }
            }
        }
        stage('Initialization') {
            steps {
                script {
                    sh"""
                    echo "PATH = $PATH"
                    echo "M2_HOME = $M2_HOME"
                    mvn validate
                    mvn initialize
                    """
                    echo 'Maven CI job has been validated and initialized.'
                }
                
            }
        }
        stage('Compilation') {
            steps {
                script {
                    sh "mvn compile"
                    echo 'Maven CI job has been compiled.'
                } 
            }
        }
        stage('Unit tests') {
            steps {
                script {
                    sh "mvn test"
                    echo "Unit tests for maven CI job have been passed."
                } 
            }
        }
        stage('Packaging') {
            steps {
                script {
                    sh "mvn package"
                    echo "An artifact for maven CI job has been created."
                } 
            }
        }
        stage('Conditional E2E Testing') {
            when { branch "feature/*" }
                steps {
                    script {
                        E2E_CHECKER = sh(
                            script: "git log --format=\"medium\" -1 | grep '#e2e' || true",
                            returnStdout: true,
                        )
                        if (E2E_CHECKER) {
                            echo "E2E Testing here"
                            configFileProvider([configFile(fileId: 'fc3e184d-fd76-4262-a1e7-9a5671ebd340', variable: 'MAVEN_SETTINGS_XML')]) {
                                sh"""
                                mvn -s $MAVEN_SETTINGS_XML dependency:get -DrepoUrl=http://artifactory:8081/artifactory/libs-snapshot-local -Dartifact=com.lidar:simulator:99-SNAPSHOT:jar -Ddest=./simulator.jar
                                mvn -s $MAVEN_SETTINGS_XML dependency:get -DrepoUrl=http://artifactory:8081/artifactory/libs-snapshot-local -Dartifact=com.lidar:telemetry:99-SNAPSHOT:jar -Ddest=./telemetry.jar
                                mv tests-full.txt tests.txt
                                mv ./target/analytics*.jar analytics.jar
                                java -cp telemetry.jar:analytics.jar:simulator.jar com.lidar.simulation.Simulator
                                """
                            }
                        }
                    }
                }
        }
        stage('E2E Testing') {
            when {
                anyOf {
                    branch "master"
                    branch "release/*"
                }
            }
            steps {
                script {
                    echo "E2E Testing here"
                    configFileProvider([configFile(fileId: 'fc3e184d-fd76-4262-a1e7-9a5671ebd340', variable: 'MAVEN_SETTINGS_XML')]) {
                        sh"""
                        mvn -s $MAVEN_SETTINGS_XML dependency:get -DrepoUrl=http://artifactory:8081/artifactory/libs-snapshot-local -Dartifact=com.lidar:simulator:99-SNAPSHOT:jar -Ddest=./simulator.jar
                        mvn -s $MAVEN_SETTINGS_XML dependency:get -DrepoUrl=http://artifactory:8081/artifactory/libs-snapshot-local -Dartifact=com.lidar:telemetry:99-SNAPSHOT:jar -Ddest=./telemetry.jar
                        mv tests-full.txt tests.txt
                        mv ./target/analytics*.jar analytics.jar
                        java -cp telemetry.jar:analytics.jar:simulator.jar com.lidar.simulation.Simulator
                        """
                    }
                }
            }    
        }
        stage('Publishing to artifactory') {
            when {
                anyOf {
                    branch "master"
                    branch "release/*"
                }
            }
            steps {
                script {
                    configFileProvider([configFile(fileId: 'fc3e184d-fd76-4262-a1e7-9a5671ebd340', variable: 'MAVEN_SETTINGS_XML')]) {
                        sh "mvn  -Dmaven.test.failure.ignore=true -DskipTests -s $MAVEN_SETTINGS_XML clean deploy -U"
                    }
                    echo "An artifact for maven CI job has been created."
                } 
            }
        }
        stage('Tagging and Pushing to GitLab Repository') {
            when { branch "release/*" }
            steps {
                script {
                    sh"""
                    git config --global user.email "adam.stegienko1@gmail.com"
                    git config --global user.name "Adam Stegienko"
                    git clean -f -x
                    git tag -a $NEW_TAG -m \"New $NEW_TAG tag added to branch $BRANCH_NAME\"
                    git push origin $BRANCH_NAME --tag
                    """
                }
            }
        }
    }
}